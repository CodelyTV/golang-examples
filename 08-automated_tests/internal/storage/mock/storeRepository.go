// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/CodelyTV/golang-examples/08-automated_tests/internal"
	"sync"
)

var (
	lockStoreRepoMockGetStores sync.RWMutex
)

// Ensure, that StoreRepoMock does implement beerscli.StoreRepo.
// If this is not the case, regenerate this file with moq.
var _ beerscli.StoreRepo = &StoreRepoMock{}

// StoreRepoMock is a mock implementation of beerscli.StoreRepo.
//
//     func TestSomethingThatUsesStoreRepo(t *testing.T) {
//
//         // make and configure a mocked beerscli.StoreRepo
//         mockedStoreRepo := &StoreRepoMock{
//             GetStoresFunc: func() ([]beerscli.Store, error) {
// 	               panic("mock out the GetStores method")
//             },
//         }
//
//         // use mockedStoreRepo in code that requires beerscli.StoreRepo
//         // and then make assertions.
//
//     }
type StoreRepoMock struct {
	// GetStoresFunc mocks the GetStores method.
	GetStoresFunc func() ([]beerscli.Store, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetStores holds details about calls to the GetStores method.
		GetStores []struct {
		}
	}
}

// GetStores calls GetStoresFunc.
func (mock *StoreRepoMock) GetStores() ([]beerscli.Store, error) {
	if mock.GetStoresFunc == nil {
		panic("StoreRepoMock.GetStoresFunc: method is nil but StoreRepo.GetStores was just called")
	}
	callInfo := struct {
	}{}
	lockStoreRepoMockGetStores.Lock()
	mock.calls.GetStores = append(mock.calls.GetStores, callInfo)
	lockStoreRepoMockGetStores.Unlock()
	return mock.GetStoresFunc()
}

// GetStoresCalls gets all the calls that were made to GetStores.
// Check the length with:
//     len(mockedStoreRepo.GetStoresCalls())
func (mock *StoreRepoMock) GetStoresCalls() []struct {
} {
	var calls []struct {
	}
	lockStoreRepoMockGetStores.RLock()
	calls = mock.calls.GetStores
	lockStoreRepoMockGetStores.RUnlock()
	return calls
}
